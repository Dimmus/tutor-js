#!/bin/bash

set -e

PURPLE=$'\e[35m'
NO_COLOR=$'\e[0m'

project_release_branch="release/$1"
project_release_subdirectory="$1/dist"

current_branch=$(git branch | sed -n -e 's/^\* \(.*\)/\1/p')

if [ `git branch --list $project_release_branch` ]; then
  git checkout $project_release_branch
  if [ -d "$project_release_subdirectory" ]; then
    git subtree pull --prefix $project_release_subdirectory origin $project_release_branch
  fi
  echo "${PURPLE}Branch $project_release_branch already exists.${NC}"
else
  git checkout -b $project_release_branch
  sed -i '' '/dist/d' .gitignore
  git add .gitignore
  git commit -m 'allow dist files'
  echo "${PURPLE}Branch $project_release_branch created.${NC}"
fi

echo "${PURPLE}Merging in latest updates from $current_branch.${NC}"
git merge $current_branch -m "merge $current_branch in prep for release"

echo "${PURPLE}Updating and building.${NC}"
npm install
bin/build "$@"

if git diff-files --quiet --ignore-submodules --; then
  echo "${PURPLE}Changes detected in build.${NC}"

  git add $project_release_subdirectory

  read -p "${PURPLE}Please enter a commit message: ${NC}" commit_message
  git commit -m "$commit_message"
  git subtree push --prefix $project_release_subdirectory origin $project_release_branch
fi

echo "${PURPLE}Done with build, $project_release_branch is up to date.${NC}"
echo "${PURPLE}Please draft a release off of $project_release_branch on GitHub to complete release.${NC}"

git checkout $current_branch

