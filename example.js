// Generated by CoffeeScript 1.7.1
(function() {
  var $ex, Compiler, DOMHelper, Handlebars, a, answer, b, background, choices, config, domify, exercise, hooks, i, keepBlankIndex, key, makeDiv, makeInput, makeRadioDiv, nextId, part, partIndex, parts, question, questionIndex, questions, randRange, state, val, _ref, _ref1;

  config = {
    short_answer: prompt('Do you prefer short answer questions ("" for no, anything else for yes)', '')
  };

  exercise = {
    logic: {
      inputs: {
        scale: {
          start: 1,
          end: 3
        },
        mass: {
          start: 1,
          end: 3
        },
        speed: {
          start: 1,
          end: 3
        }
      },
      outputs: {
        ship_mass: function(_arg) {
          var mass, scale, speed;
          scale = _arg.scale, mass = _arg.mass, speed = _arg.speed;
          return scale * Math.pow(100, mass);
        },
        ship_speed: function(_arg) {
          var mass, scale, speed;
          scale = _arg.scale, mass = _arg.mass, speed = _arg.speed;
          return scale * Math.pow(10, speed);
        },
        ship_force: function(_arg) {
          var mass, scale, speed;
          scale = _arg.scale, mass = _arg.mass, speed = _arg.speed;
          return scale * Math.pow(100, mass) * scale * Math.pow(10, speed);
        },
        ship_mass_grams: function(_arg) {
          var mass, scale, speed;
          scale = _arg.scale, mass = _arg.mass, speed = _arg.speed;
          return scale * Math.pow(100, mass) * 1000;
        },
        ship_mass_div_speed: function(_arg) {
          var mass, scale, speed;
          scale = _arg.scale, mass = _arg.mass, speed = _arg.speed;
          return scale * Math.pow(100, mass) / scale * Math.pow(10, speed);
        }
      }
    },
    background: 'This exercise has many parts. Each one is a different type of question. Einstein makes a {{ ship_mass }} kg spaceship',
    parts: [
      {
        background: 'The spaceship moves at {{ ship_speed }} m/s',
        questions: [
          {
            stem: 'What is the rest mass? (Short answer)',
            short_stem: 'Enter your answer in kg',
            answers: [
              {
                credit: 1,
                value: '{{ ship_mass }}'
              }
            ]
          }, {
            stem: 'What is the rest mass?',
            short_stem: 'Enter your answer in kg',
            answers: [
              {
                credit: 1,
                value: '{{ ship_mass }}'
              }, {
                credit: 0,
                value: '{{ ship_mass_grams }}',
                hint: 'Check the units'
              }
            ]
          }, {
            stem: 'What is the force if it slams into a wall?',
            short_stem: 'Enter your answer in N',
            answers: [
              {
                credit: 1,
                value: '{{ ship_force }}',
                content: '{{ ship_force }} N'
              }, {
                credit: 0,
                value: '{{ ship_mass_div_speed }}',
                content: '{{ ship_mass_div_speed }} N',
                hint: 'Remember 1 Newton (N) is 1 kg*m/s'
              }
            ]
          }
        ]
      }, {
        background: 'Simple fill-in-the-blank questions',
        questions: [
          {
            stem: 'Photosynthesis ____ ATP',
            answers: [
              {
                credit: 1,
                value: 'creates'
              }
            ]
          }
        ]
      }, {
        background: 'Fill in this table (this is a multi-fill-in-the-blank):\n\n<table>\n  <tr><th>Time</th><th>Distance</th><th>Velocity</th></tr>\n  <tr><td>t<sub>0</sub></td><td>____1</td><td>____2</td></tr>\n  <tr><td>t<sub>1</sub></td><td>____3</td><td>____4</td></tr>\n  <tr><td>t<sub>2</sub></td><td>____5</td><td>____6</td></tr>\n</table>',
        questions: [
          {
            answers: [
              {
                credit: 1,
                value: 0
              }
            ]
          }, {
            answers: [
              {
                credit: 1,
                value: -1,
                content: '{{ ship_mass }}'
              }
            ]
          }, {
            answers: [
              {
                credit: 1,
                value: '{{ ship_force }}'
              }
            ]
          }, {
            answers: [
              {
                credit: 1,
                value: 10,
                content: '{{ ship_speed }}'
              }
            ]
          }, {
            answers: [
              {
                credit: 1,
                value: 100,
                content: '{{ ship_force }}'
              }
            ]
          }, {
            answers: [
              {
                credit: 1,
                value: 1000,
                content: '{{ ship_mass_grams }}'
              }
            ]
          }
        ]
      }
    ]
  };

  Handlebars = requireModule('handlebars')["default"];

  Compiler = requireModule('htmlbars-compiler/compiler');

  DOMHelper = requireModule('morph').DOMHelper;

  hooks = requireModule('htmlbars-runtime').hooks;

  randRange = function(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  };

  state = {};

  _ref = exercise.logic.inputs;
  for (key in _ref) {
    val = _ref[key];
    state[key] = randRange(val.start, val.end);
  }

  _ref1 = exercise.logic.outputs;
  for (key in _ref1) {
    val = _ref1[key];
    val = val(state);
    try {
      val = parseInt(val);
      val = val.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
    } catch (_error) {
      '';
    }
    state[key] = val;
  }

  domify = function(source, data) {
    var dom, template;
    template = Compiler.compile(source);
    dom = template(data, {
      hooks: hooks,
      dom: new DOMHelper()
    });
    return dom;
  };

  makeDiv = function(name, text, children) {
    if (children == null) {
      children = [];
    }
    text = text.replace(/____(\d+)?/g, '<input type="text"/>');
    return "<div class='" + name + "'>" + text + (children.join('')) + "</div>";
  };

  makeInput = function(name, text) {
    text = text.replace(/____(\d+)?/g, '<input type="text"/>');
    return "<input type='text' class='" + name + "' placeholder=\"" + text + "\"/>";
  };

  nextId = 0;

  makeRadioDiv = function(questionId, name, value, text) {
    var id;
    id = "id-" + (nextId++);
    text = text.replace(/____(\d+)?/g, '<input type="text"/>');
    return "<div class='" + name + "'><input type='radio' name='" + questionId + "' id='" + id + "' value='" + value + "'/> <label for='" + id + "'>" + text + "</label></div>";
  };

  parts = (function() {
    var _i, _j, _len, _len1, _ref2, _ref3, _results;
    _ref2 = exercise.parts;
    _results = [];
    for (partIndex = _i = 0, _len = _ref2.length; _i < _len; partIndex = ++_i) {
      part = _ref2[partIndex];
      if (part.background && part.background.split('____').length > 2 && config.short_answer) {
        background = part.background;
        keepBlankIndex = randRange(0, part.questions.length - 1);
        _ref3 = part.questions;
        for (i = _j = 0, _len1 = _ref3.length; _j < _len1; i = ++_j) {
          question = _ref3[i];
          if (i !== keepBlankIndex) {
            answer = question.answers[0].content || question.answers[0].value;
            background = background.replace("____" + (i + 1), answer);
          }
        }
        _results.push(makeDiv('part', background));
      } else {
        questions = (function() {
          var _k, _len2, _ref4, _results1;
          _ref4 = part.questions;
          _results1 = [];
          for (questionIndex = _k = 0, _len2 = _ref4.length; _k < _len2; questionIndex = ++_k) {
            question = _ref4[questionIndex];
            if (/____(\d+)?/.test(question.stem)) {
              _results1.push(makeDiv('question', question.stem));
            } else if (question.answers.length > 1 && !config.short_answer) {
              choices = (function() {
                var _l, _len3, _ref5, _results2;
                _ref5 = question.answers;
                _results2 = [];
                for (_l = 0, _len3 = _ref5.length; _l < _len3; _l++) {
                  answer = _ref5[_l];
                  if (answer.content) {
                    _results2.push(makeRadioDiv("id-" + partIndex + "-" + questionIndex, 'choice', answer.value, answer.content));
                  } else {
                    _results2.push(makeRadioDiv("id-" + partIndex + "-" + questionIndex, 'choice', answer.value, answer.value));
                  }
                }
                return _results2;
              })();
              _results1.push(makeDiv('question', question.stem, choices));
            } else {
              if (question.short_stem) {
                a = makeDiv('question', question.stem);
                b = makeInput('question', question.short_stem);
                _results1.push("" + a + b);
              } else if (question.stem) {
                a = makeDiv('question', question.stem);
                b = makeInput('question', '');
                _results1.push("" + a + b);
              } else {
                _results1.push('');
              }
            }
          }
          return _results1;
        })();
        _results.push(makeDiv('part', part.background, questions));
      }
    }
    return _results;
  })();

  $ex = document.getElementById('exercise');

  $ex.innerHTML = '';

  $ex.appendChild(domify(makeDiv('background', exercise.background, parts), state));

}).call(this);
