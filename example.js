// Generated by CoffeeScript 1.7.1
(function() {
  var a, answer, b, choices, config, exercise, key, makeDiv, makeInput, makeRadioDiv, max, min, part, parts, question, questions, state, val, _ref, _ref1;

  config = {
    short_answer: prompt('Do you prefer short answer questions ("" for no, anything else for yes)', '')
  };

  exercise = {
    logic: {
      inputs: {
        scale: {
          start: 1,
          end: 3
        },
        mass: {
          start: 1,
          end: 3
        },
        speed: {
          start: 1,
          end: 3
        }
      },
      outputs: {
        ship_mass: function(_arg) {
          var mass, scale, speed;
          scale = _arg.scale, mass = _arg.mass, speed = _arg.speed;
          return scale * Math.pow(100, mass);
        },
        ship_speed: function(_arg) {
          var mass, scale, speed;
          scale = _arg.scale, mass = _arg.mass, speed = _arg.speed;
          return scale * Math.pow(10, speed);
        },
        ship_force: function(_arg) {
          var mass, scale, speed;
          scale = _arg.scale, mass = _arg.mass, speed = _arg.speed;
          return scale * Math.pow(100, mass) * scale * Math.pow(10, speed);
        },
        ship_mass_grams: function(_arg) {
          var mass, scale, speed;
          scale = _arg.scale, mass = _arg.mass, speed = _arg.speed;
          return scale * Math.pow(100, mass) * 1000;
        },
        ship_mass_div_speed: function(_arg) {
          var mass, scale, speed;
          scale = _arg.scale, mass = _arg.mass, speed = _arg.speed;
          return scale * Math.pow(100, mass) / scale * Math.pow(10, speed);
        }
      }
    },
    background: 'This exercise has many parts. Each one is a different type of question. Einstein makes a {{ ship_mass }} kg spaceship',
    parts: [
      {
        background: 'The spaceship moves at {{ ship_speed }} m/s',
        questions: [
          {
            stem: 'What is the rest mass? (Short answer)',
            short_stem: 'Enter your answer in kg',
            answers: [
              {
                credit: 1,
                value: '{{ ship_mass }}'
              }
            ]
          }, {
            stem: 'What is the rest mass?',
            short_stem: 'Enter your answer in kg',
            answers: [
              {
                credit: 1,
                value: '{{ ship_mass }}'
              }, {
                credit: 0,
                value: '{{ ship_mass_grams }}',
                hint: 'Check the units'
              }
            ]
          }, {
            stem: 'What is the force if it slams into a wall?',
            short_stem: 'Enter your answer in N',
            answers: [
              {
                credit: 1,
                value: '{{ ship_force }}',
                content: '{{ ship_force }} N'
              }, {
                credit: 0,
                value: '{{ ship_mass_div_speed }}',
                content: '{{ ship_mass_div_speed }} N',
                hint: 'Remember 1 Newton (N) is 1 kg*m/s'
              }
            ]
          }
        ]
      }, {
        background: 'Simple fill-in-the-blank questions',
        questions: [
          {
            stem: 'Photosynthesis ____ ATP',
            answers: [
              {
                credit: 1,
                value: 'creates'
              }
            ]
          }
        ]
      }, {
        background: 'Fill in this table (this is a multi-fill-in-the-blank):\n\n<table>\n  <tr><th>Time</th><th>Distance</th><th>Velocity</th></tr>\n  <tr><td>t<sub>0</sub></td><td>____1</td><td>____2</td></tr>\n  <tr><td>t<sub>1</sub></td><td>____3</td><td>____4</td></tr>\n  <tr><td>t<sub>2</sub></td><td>____5</td><td>____6</td></tr>\n</table>',
        questions: [
          {
            answers: [
              {
                credit: 1,
                value: 0
              }
            ]
          }, {
            answers: [
              {
                credit: 1,
                value: 1
              }
            ]
          }, {
            answers: [
              {
                credit: 1,
                value: 0
              }
            ]
          }, {
            answers: [
              {
                credit: 1,
                value: 10
              }
            ]
          }, {
            answers: [
              {
                credit: 1,
                value: 10
              }
            ]
          }, {
            answers: [
              {
                credit: 1,
                value: 100
              }
            ]
          }
        ]
      }
    ]
  };

  state = {};

  _ref = exercise.logic.inputs;
  for (key in _ref) {
    val = _ref[key];
    min = val.start;
    max = val.end;
    state[key] = Math.floor(Math.random() * (max - min + 1)) + min;
  }

  _ref1 = exercise.logic.outputs;
  for (key in _ref1) {
    val = _ref1[key];
    val = val(state);
    try {
      val = parseInt(val);
      val = val.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
    } catch (_error) {
      '';
    }
    state[key] = val;
  }

  console.log(state);

  makeDiv = function(name, text, children) {
    if (children == null) {
      children = [];
    }
    text = text.replace(/____(\d+)?/g, '<input type="text"/>');
    return "<div class='" + name + "'>" + (Handlebars.compile(text)(state)) + (children.join('')) + "</div>";
  };

  makeInput = function(name, text) {
    text = text.replace(/____(\d+)?/g, '<input type="text"/>');
    return "<input type='text' class='" + name + "' placeholder=\"" + (Handlebars.compile(text)(state)) + "\"/>";
  };

  makeRadioDiv = function(name, text) {
    text = text.replace(/____(\d+)?/g, '<input type="text"/>');
    return "<div class='" + name + "'><input type='radio'/> " + (Handlebars.compile(text)(state)) + "</div>";
  };

  parts = (function() {
    var _i, _len, _ref2, _results;
    _ref2 = exercise.parts;
    _results = [];
    for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
      part = _ref2[_i];
      questions = (function() {
        var _j, _len1, _ref3, _results1;
        _ref3 = part.questions;
        _results1 = [];
        for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
          question = _ref3[_j];
          if (/____(\d+)?/.test(question.stem)) {
            _results1.push(makeDiv('question', question.stem));
          } else if (question.answers.length > 1 && !config.short_answer) {
            choices = (function() {
              var _k, _len2, _ref4, _results2;
              _ref4 = question.answers;
              _results2 = [];
              for (_k = 0, _len2 = _ref4.length; _k < _len2; _k++) {
                answer = _ref4[_k];
                if (answer.content) {
                  _results2.push(makeRadioDiv('choice', answer.content));
                } else {
                  _results2.push(makeRadioDiv('choice', answer.value));
                }
              }
              return _results2;
            })();
            _results1.push(makeDiv('question', question.stem, choices));
          } else {
            if (question.short_stem) {
              a = makeDiv('question', question.stem);
              b = makeInput('question', question.short_stem);
              _results1.push("" + a + b);
            } else if (question.stem) {
              a = makeDiv('question', question.stem);
              b = makeInput('question', '');
              _results1.push("" + a + b);
            } else {
              _results1.push('');
            }
          }
        }
        return _results1;
      })();
      _results.push(makeDiv('part', part.background, questions));
    }
    return _results;
  })();

  document.getElementById('exercise').innerHTML = makeDiv('background', exercise.background, parts);

}).call(this);
